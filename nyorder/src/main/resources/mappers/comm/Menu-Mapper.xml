<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.namyang.nyorder.comm.dao.MenuMapper">
	
	<sql id="selectMenuWhere">
		<where>
			<if test="@com.namyang.nyorder.util.MyBatisCmpr@isNotEmpty(menuNm)">
				AND MENU_NM like '%'+#{menuNm}+'%'
			</if>
		</where>
	</sql>
	
	<sql id="selectMenu">
		WITH MENU_TABLE
		AS
		(
			   SELECT
			   		1 AS LEVEL,
			   		MENU_ID, 
					MENU_SEQ,
					MENU_PARENT_SEQ, 
					MENU_NM,
					MENU_URL,
					MENU_ORDR,
					MENU_TYPE,
					USE_YN,
					convert(varchar(100),RIGHT('0'+convert(varchar(100),MENU_ORDR),4))  sort,
					convert(varchar(100),MENU_NM)   MENU_CURRENT,
					convert(varchar(100),MENU_SEQ)   MENU_CURRENT_SEQ,
					convert(varchar(100),MENU_NM) as lvl1,
					convert(varchar(100),'') as lvl2,
					convert(varchar(100),'') as lvl3
			   FROM		dbo.T_COMM_MENU
			   WHERE	MENU_PARENT_SEQ = 0

			   UNION ALL

			   SELECT 
			   			LEVEL+1,
			   			B.MENU_ID,
			   			B.MENU_SEQ, 
			   			B.MENU_PARENT_SEQ, 
			   			B.MENU_NM,
			   			B.MENU_URL,
			   			B.MENU_ORDR,
			   			B.MENU_TYPE,
			   			B.USE_YN,
			   			convert(varchar(100), convert(nvarchar,C.sort) + ' > ' + RIGHT(('0'+ convert(varchar(100),B.MENU_ORDR)),4)) sort,
			   			CONVERT(varchar(100), convert(nvarchar,C.MENU_CURRENT) + ' > ' + convert(varchar(100), B.MENU_NM)) MENU_CURRENT,
			   			CONVERT(varchar(100), convert(nvarchar,C.MENU_CURRENT_SEQ) + ' , ' + convert(varchar(100), B.MENU_SEQ)) MENU_CURRENT_SEQ,
						convert(varchar(100),C.lvl1) as lvl1,
			   			case when LEVEL+1 = '2' then convert(varchar(100),B.MENU_NM) else convert(varchar(100),C.MENU_NM) end  as lvl2,
			   			case when LEVEL+1 = '3' then convert(varchar(100),B.MENU_NM) else '' end  as lvl3
			   FROM 	dbo.T_COMM_MENU B 
			   JOIN 	MENU_TABLE C 
			   ON		B.MENU_PARENT_SEQ = C.MENU_SEQ
		),
		
		cur_table AS
		(
		
			SELECT
	  				MENU_SEQ, MENU_PARENT_SEQ, '1' MENU_CURRENT_GBN
			FROM	dbo.T_COMM_MENU
			WHERE	MENU_URL = #{menuUrl, jdbcType=VARCHAR}
			UNION ALL
			SELECT  B.MENU_SEQ, B.MENU_PARENT_SEQ, '1' MENU_CURRENT_GBN
		   FROM 	dbo.T_COMM_MENU B 
		   JOIN 	cur_table C 
		   ON		C.MENU_PARENT_SEQ = B.MENU_SEQ
		)
	</sql>
	
	<select id="selectMenuAllList" resultType="com.namyang.nyorder.comm.vo.MenuRoleVO" parameterType="com.namyang.nyorder.comm.vo.MenuRoleVO">
		/* menu-Mapper - selectMenuAllList */
		<include refid="selectMenu"/>
		SELECT  
				LEVEL,
				MENU_ID,
				M.MENU_SEQ, 
				MENU_PARENT_SEQ, 
				MENU_NM,
				MENU_URL,
				MENU_ORDR,
				MENU_TYPE,
				USE_YN,
				MENU_CURRENT,
				LVL1,
				LVL2,
				LVL3,
			ISNULL((
				SELECT 'Y'
				FROM T_COMM_MENU_ROLE CR 
				WHERE M.MENU_SEQ = CR.MENU_SEQ 
				AND	 CR.USE_YN = 'Y'
				), 'N') STOR_OWNR_YN
		FROM 	MENU_TABLE M
		<include refid="selectMenuWhere"/>
		ORDER BY SORT
	</select>
	
	
	<select id="selectLeftMenuList"  resultType="com.namyang.nyorder.comm.vo.MenuVO" parameterType="com.namyang.nyorder.comm.vo.MenuVO">
		/* menu-Mapper - selectLeftMenuList */
		<include refid="selectMenu"/>
		SELECT  
				LEVEL,
				MENU_ID,
				M.MENU_SEQ, 
				M.MENU_PARENT_SEQ, 
				MENU_NM,
				MENU_URL,
				MENU_TYPE,
				MENU_ORDR,
				MENU_CURRENT,
				MENU_CURRENT_SEQ,
				CASE WHEN CHARINDEX(',' , MENU_CURRENT_SEQ) = 0 THEN MENU_CURRENT_SEQ ELSE RTRIM(LTRIM(LEFT(MENU_CURRENT_SEQ, CHARINDEX(',' , MENU_CURRENT_SEQ)-1))) END PARENT_SEQ,
				MENU_CURRENT_GBN
		FROM 	MENU_TABLE M
		INNER
		JOIN	
		(
				SELECT MENU_SEQ 
				FROM
				(
					SELECT	MENU_SEQ 
					FROM 	T_AGEN_EMPL E
					INNER JOIN
						T_AGEN_EMPL_ROLE R
					ON	E.EMPL_SEQ = R.EMPL_SEQ 
					AND E.AGEN_SEQ = R.AGEN_SEQ 
					WHERE E.AGEN_SEQ = #{agenSeq}
					AND E.EMPL_SEQ = #{emplSeq}
					AND R.USE_YN = 'Y'
					UNION ALL
					SELECT	MENU_SEQ
					FROM	T_AGEN_EMPL E
					INNER
					JOIN	T_AGEN_MENU_ROLE R
					ON	E.EMPL_SEC_CD = R.EMPL_SEC 
					AND E.AGEN_SEQ = R.AGEN_SEQ 
					WHERE 	E.AGEN_SEQ = #{agenSeq}
					AND 	E.EMPL_SEQ = #{emplSeq}
					AND		R.USE_YN = 'Y'
					AND		MENU_SEQ NOT IN ( SELECT MENU_SEQ FROM T_AGEN_EMPL_ROLE WHERE EMPL_SEQ = #{emplSeq} AND AGEN_SEQ = #{agenSeq} AND USE_YN = 'N' )
					UNION ALL
					SELECT MENU_SEQ
					FROM T_COMM_MENU_ROLE
					WHERE 'STOR_OWNR' = (SELECT EMPL_SEC_CD FROM T_AGEN_EMPL WHERE EMPL_SEQ = #{emplSeq} AND AGEN_SEQ = #{agenSeq} )
				) a
				GROUP BY MENU_SEQ
		) C	
		ON		M.MENU_SEQ = C.MENU_SEQ
		LEFT
		JOIN	cur_table	D
		ON		M.MENU_SEQ = D.MENU_SEQ
		
		WHERE	M.USE_YN = 'Y'
		AND		M.MENU_SEQ > 1
		AND		((SELECT SALE_CD FROM T_AGEN_MST WHERE AGEN_SEQ = #{agenSeq}) = 'SYS' OR  M.MENU_TYPE = 'ALL' OR M.MENU_TYPE = (SELECT SALE_CD FROM T_AGEN_MST WHERE AGEN_SEQ = #{agenSeq}) )
		ORDER BY SORT
	</select>
	
	<select id="selectLeftBkmkMenuList" resultType="com.namyang.nyorder.comm.vo.MenuVO" parameterType="com.namyang.nyorder.comm.vo.MenuVO">
	/* menu-Mapper - getLeftBkmkMenuList */
		SELECT  
				M.MENU_SEQ, 
				M.MENU_PARENT_SEQ, 
				MENU_NM,
				MENU_URL,
				MENU_TYPE,
				MENU_ORDR
		FROM 	T_COMM_MENU M
		INNER
		JOIN	
		(
				SELECT MENU_SEQ , EMPL_SEQ 
				FROM
				(
					SELECT	MENU_SEQ, E.EMPL_SEQ  
					FROM 	T_AGEN_EMPL E
					INNER JOIN
						T_AGEN_EMPL_ROLE R
					ON	E.EMPL_SEQ = R.EMPL_SEQ 
					AND E.AGEN_SEQ = R.AGEN_SEQ 
					WHERE E.AGEN_SEQ = #{agenSeq}
					AND E.EMPL_SEQ = #{emplSeq}
					AND R.USE_YN = 'Y'
					UNION ALL
					SELECT	MENU_SEQ, E.EMPL_SEQ 
					FROM	T_AGEN_EMPL E
					INNER
					JOIN	T_AGEN_MENU_ROLE R
					ON	E.EMPL_SEC_CD = R.EMPL_SEC 
					AND E.AGEN_SEQ = R.AGEN_SEQ 
					WHERE 	E.AGEN_SEQ = #{agenSeq}
					AND 	E.EMPL_SEQ = #{emplSeq}
					AND		R.USE_YN = 'Y'
					AND		MENU_SEQ NOT IN ( SELECT MENU_SEQ FROM T_AGEN_EMPL_ROLE WHERE EMPL_SEQ = #{emplSeq} AND AGEN_SEQ = #{agenSeq} AND USE_YN = 'N' )
				) a
				GROUP BY MENU_SEQ, EMPL_SEQ 
		) C	
		ON		M.MENU_SEQ = C.MENU_SEQ
		INNER
		JOIN 	T_AGEN_EMPL_BKMK	B
		ON		M.MENU_SEQ	=	B.MENU_SEQ
		AND 	B.EMPL_SEQ  =   C.EMPL_SEQ
		WHERE	B.USE_YN 	=	'Y'
	</select>
	
	<select id="selectBreadcrumb" resultType="com.namyang.nyorder.comm.vo.MenuVO" parameterType="com.namyang.nyorder.comm.vo.MenuVO">
		/* menu-Mapper - selectBreadcrumb */	
		WITH MENU_TABLE
		AS
		(
				SELECT
			   		1 AS LEVEL,
			   		MENU_ID, 
					MENU_SEQ,
					MENU_PARENT_SEQ, 
					MENU_NM,
					MENU_URL,
					MENU_ORDR,
					'1' MENU_CURRENT_GBN
				FROM		dbo.T_COMM_MENU
				WHERE	MENU_URL = #{menuUrl, jdbcType=VARCHAR}
				UNION ALL
		
				SELECT 
			   			LEVEL+1,
			   			B.MENU_ID,
			   			B.MENU_SEQ, 
			   			B.MENU_PARENT_SEQ, 
			   			B.MENU_NM,
			   			B.MENU_URL,
			   			B.MENU_ORDR,
			   			'0' MENU_CURRENT_GBN
			   FROM 	dbo.T_COMM_MENU B 
			   JOIN 	MENU_TABLE C 
			   ON		C.MENU_PARENT_SEQ = B.MENU_SEQ
			   WHERE	B.USE_YN ='Y'
		)
		
		SELECT  
				LEVEL,
				MENU_ID,
				M.MENU_SEQ, 
				MENU_PARENT_SEQ, 
				MENU_NM,
				MENU_URL,
				MENU_ORDR,
				MENU_CURRENT_GBN,
				(	SELECT 'Y' 
					FROM T_AGEN_EMPL_BKMK B 
					WHERE B.MENU_SEQ = M.MENU_SEQ 
					AND B.EMPL_SEQ = #{emplSeq} 
					AND B.AGEN_SEQ = #{agenSeq} 
					AND B.USE_YN ='Y' 
				) bkmk_yn
		FROM 	MENU_TABLE M
		WHERE	MENU_SEQ > 0
		ORDER BY LEVEL DESC
	</select>
	
	<update id="addMenu" parameterType="com.namyang.nyorder.comm.vo.MenuRoleVO">
			<selectKey keyProperty="menuSeq" resultType="String" order="BEFORE"> SELECT NEXT VALUE FOR SQ_MENU</selectKey>
			
			/* menu-Mapper - addMenu */
			INSERT INTO T_COMM_MENU
			(MENU_SEQ, MENU_NM, USE_YN, MENU_TYPE, MENU_URL, MENU_ORDR, MENU_PARENT_SEQ, REG_DTM, REG_SEQ, UPD_DTM, UPD_SEQ)
			VALUES
			(#{menuSeq},#{menuNm},#{useYn},#{menuType},#{menuUrl},#{menuOrdr},#{menuParentSeq},CURRENT_TIMESTAMP,#{emplSeq},CURRENT_TIMESTAMP,#{emplSeq});
			
			INSERT INTO T_AGEN_EMPL_ROLE
			(MENU_SEQ,AGEN_SEQ,EMPL_SEQ,USE_YN,REG_DTM, REG_SEQ, UPD_DTM, UPD_SEQ)
			VALUES (#{menuSeq},0,0,'Y',CURRENT_TIMESTAMP,#{emplSeq},CURRENT_TIMESTAMP,#{emplSeq});
			

			<if test="@com.namyang.nyorder.util.MyBatisCmpr@isNotEmpty(storOwnrYn)">
			MERGE INTO T_COMM_MENU_ROLE A
			USING (	
					SELECT	#{menuSeq} AS MENU_SEQ
			) B 
			ON (
					A.MENU_SEQ = B.MENU_SEQ
			)
			WHEN	MATCHED THEN 
					UPDATE SET USE_YN	= #{storOwnrYn}
			WHEN	NOT MATCHED THEN
				INSERT (MENU_SEQ, MENU_TYPE, USE_YN, REG_DTM, REG_SEQ, UPD_DTM, UPD_SEQ)
				VALUES (#{menuSeq}, #{menuType}, #{storOwnrYn}, CURRENT_TIMESTAMP,#{emplSeq},CURRENT_TIMESTAMP,#{emplSeq});
			</if>
	</update>
	<update id="updateMenuList" parameterType="com.namyang.nyorder.comm.vo.MenuRoleVO">
			/* menu-Mapper - updateMenuList */
			UPDATE	T_COMM_MENU
	   		SET		MENU_NM 	= 	#{menuNm},
	   				USE_YN 		= 	#{useYn},
	   				MENU_TYPE 	= 	#{menuType},
	   				MENU_URL	=	#{menuUrl},
	   				MENU_ORDR	=	#{menuOrdr},
	   				MENU_PARENT_SEQ = #{menuParentSeq},
	   				UPD_DTM		=	CURRENT_TIMESTAMP,
	   				UPD_SEQ		=	#{emplSeq}
			WHERE	MENU_SEQ	=	#{menuSeq};
			
			<if test="@com.namyang.nyorder.util.MyBatisCmpr@isNotEmpty(storOwnrYn)">
			MERGE INTO T_COMM_MENU_ROLE A
			USING (	
					SELECT	#{menuSeq} AS MENU_SEQ
			) B 
			ON (
					A.MENU_SEQ = B.MENU_SEQ
			)
			WHEN	MATCHED THEN 
					UPDATE SET USE_YN	= #{storOwnrYn},
					UPD_DTM		=	CURRENT_TIMESTAMP,
	   				UPD_SEQ		=	#{emplSeq}
			WHEN	NOT MATCHED THEN
				INSERT (MENU_SEQ, MENU_TYPE, USE_YN, REG_DTM, REG_SEQ, UPD_DTM, UPD_SEQ)
				VALUES (#{menuSeq}, #{menuType}, #{storOwnrYn}, CURRENT_TIMESTAMP,#{emplSeq},CURRENT_TIMESTAMP,#{emplSeq});
			</if>
	</update>
	
	<update id="updateBkmk" parameterType="com.namyang.nyorder.comm.vo.MenuRoleVO">
			MERGE INTO T_AGEN_EMPL_BKMK A
			USING (	
					SELECT	#{menuSeq} AS MENU_SEQ,
							#{emplSeq} AS EMPL_SEQ,
							#{agenSeq} AS AGEN_SEQ
			) B 
			ON (
					A.MENU_SEQ = B.MENU_SEQ
					AND A.EMPL_SEQ = B.EMPL_SEQ
					AND A.AGEN_SEQ = B.AGEN_SEQ
			)
			WHEN	MATCHED THEN 
					UPDATE SET USE_YN	= CASE WHEN A.USE_YN = 'Y' THEN 'N' ELSE 'Y' END
			WHEN	NOT MATCHED THEN
				INSERT (AGEN_SEQ, EMPL_SEQ, MENU_SEQ, USE_YN, REG_DTM, REG_SEQ, UPD_DTM, UPD_SEQ)
				VALUES (#{agenSeq}, #{emplSeq}, #{menuSeq}, 'Y', CURRENT_TIMESTAMP,0,CURRENT_TIMESTAMP,0);
	</update>
	
</mapper>